#!/usr/bin/env node

/*
 * Run all analytics reports output JSON to disk.
 *
 * Usage: analytics
 *
 * Defaults to printing JSON to STDOUT.
 *
 * --output: Output to a directory.
 * --publish: Publish to an S3 bucket.
 * --only: only run one or more named reports.
 * --slim: Where supported, use totals only (omit the `data` array).
 *         Only applies to JSON, and reports where "slim": true.
 * --csv: CSV instead of JSON.
 * --frequency: Limit to reports with this 'frequency' value.
 * --debug: print debug details on STDOUT
 */

var Analytics = require("../analytics"),
    config = require("../config"),
    fs = require("fs"),
    path = require('path'),
    async = require("async"),
    csv = require("fast-csv"),
    zlib = require('zlib');
var r = require('rethinkdb');
var agencyName = config.db.table;

// AWS credentials are looked for in env vars or in ~/.aws/config.
// AWS bucket and path need to be set in env vars mentioned in config.js.

var AWS = require("aws-sdk");

var publish = function(name, data, extension, options, callback) {
  if (options.debug) console.log("[" + name + "] Publishing to " + config.aws.bucket + "...");

  var mime = {".json": "application/json", ".csv": "text/csv"};

  zlib.gzip(data, function(err, compressed) {
    if (err) return console.log("ERROR AFTER GZIP: " + err);

    new AWS.S3({params: {Bucket: config.aws.bucket}}).upload({
      Key: config.aws.path + "/" + name + extension,
      Body: compressed,
      ContentType: mime[extension],
      ContentEncoding: "gzip",
      ACL: "public-read",
      CacheControl: "max-age=" + (config.aws.cache || 0)
    }, callback);
  });
};

// Just Creates a RethinkDB Database.
// usage:
//   analytics --setupdb --db_name [string]
// options: 
//   --db_name string [required]
//   --db_host string [optional]
//   --db_port string [optional]
var setupdb = function(options) {

  var db_host = config.db.host;
  var db_port = config.db.port;

  if (!options) options = {};
  if (options.db_host) db_host = options.db_host;
  if (options.db_port) db_port = options.db_port;

  if(typeof(options['db_name']) == "undefined") {
    console.log("Value for db_name required.");
    return;
  }
  if(options.db_name.length > 1) {
    // Create a DB.
    r.connect({ host: db_host, port: db_port }, function(err, conn) {
      if(err) {
        console.log("Issue connecting to RethinkDB on HOST: " + db_host + " | PORT: " + db_port);
        throw err;
      }
      r.dbCreate(options.db_name).run(conn, function(){
        console.log('RethinkDB Database: ' + options.db_name + " Created!");
        conn.close();
      });

    });
  } else {
    console.log("Value for db_name required.");
  }

};


var run = function(options) {
  
  if (!options) options = {};
  if (options.debug) options.verbose = options.debug;
  if (options.verbose) options.debug = options.verbose;

  // can be overridden to only do one report
  var names;
  if (options.only)
    names = options.only.split(",");

  else if (options.frequency) {
    names = [];
    var all = Object.keys(Analytics.reports);
    for (var i=0; i<all.length; i++) {
      if (Analytics.reports[all[i]].frequency == options.frequency)
        names.push(all[i]);
    }
  }

  else
    names = Object.keys(Analytics.reports);

  var eachReport = function(name, done) {
    var report = Analytics.reports[name];

    if (!report) return done('Report not defined.');

    if (options.debug) console.log("\n[" + report.name + "] Fetching...");
    Analytics.query(report, function(err, data) {
        if (err) return console.log("ERROR AFTER QUERYING: " + err);

        if (options.debug) console.log("[" + report.name + "] Saving report data...");

        // CSV, see https://github.com/C2FO/fast-csv#formatting-functions
        if (options.csv) {
          csv.writeToString(data['data'], {headers: true}, function(err, data) {
            if (err) return console.log("ERROR AFTER CSV: " + JSON.stringify(err));

            writeReport(name, data, ".csv", done);
          });
        }

        // JSON
        else {
          // some reports can be slimmed down for direct rendering
          if (options.slim && report.slim) delete data.data;

          writeReport(name, JSON.stringify(data, null, 2), ".json", done);
        }
    });
  };

  var writeReport = function(name, output, extension, done) {
    var written = function(err) {
      if (err)
        console.error("ERROR AFTER WRITING: " + JSON.stringify(err));
      else if (options.debug)
        console.log("[" + name + "] Done.");
      done();
    };

    if (options.publish)
      publish(name, output, extension, options, written);
    else if(options.setupdb) {
      setupdb(options);

    } else if (options.output && (typeof(options.output) == "string"))
      fs.writeFile(path.join(options.output, (name + extension)), output, written);

    else {
      // allows users to pretty reliably split on \n\n
      console.log(output + "\n");
      written();
    }
  };

  async.eachSeries(names, eachReport, function(err) {
    if (err) {
      console.error(err);
      process.exit(1);
    }

    if (options.debug) console.log("All done.");
  });
};

if(config.db.host.length > 1 && agencyName != null) {

  r.connect({ host: config.db.host, port: config.db.port }, function(err, conn) {
    if(err) throw err;
    // Create DB Table if it does not exist.
    // Then, run Reports, store the data, and close any connections.
    r.db(config.db.name)
     .tableList()
     .contains(agencyName)
     .do(function(tableExists){
      return r.branch(
        tableExists,
        null,
        r.tableCreate(agencyName)
      );
     })
     .run(conn)
     .then(function(){
      run(require('minimist')(process.argv.slice(2)));
      conn.close();
    });
  });

} else {
  // No RethinkDB config specified.
  // Don't store data in DB, only write to files.
  run(require('minimist')(process.argv.slice(2)));
}


